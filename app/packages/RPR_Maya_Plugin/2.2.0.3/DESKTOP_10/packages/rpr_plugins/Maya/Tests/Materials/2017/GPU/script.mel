// TODO: mb dived template for material test and other tests
source shelfCommands.mel;
source maya_benchmark_common.mel;

//Scene Information:
//configs:
global string $resultsDirectoryName = "D:/jobs_launcher/work/MaxMaya/DESKTOP-V0T0AVM/packages/rpr_plugins/Maya/Tests/Materials/2017/GPU";
global string $testType = "Materials";
global string $reportName = "report_mel.json";

// [0] project name
// [1] model name
// [2] additional script that are called before render
// [3] additional File Name identifier
global string $sceneRenderData[] = {
//"Acrylic_Refractive_Glossy_Green"
//,"Acrylic_Refractive_Glossy_Neon_Green",
//"Acrylic_Refractive_Glossy_Neon_Orange",
//"Acrylic_Refractive_Glossy_Red",
//"Acrylic_Refractive_Matte_Green",
//"Acrylic_Refractive_Matte_Red",
//"Acrylic_Transparent_Glossy_Red",
//"Acrylic_Transparent_Matte_Red",
"Aluminium_Anodized",
"Aluminium_Directional"
//,"Aluminium_Oxidized",
//"Aluminium_Polished",
//"Aluminium_Sandblasted",
//"Aluminum_Brushed",
//"Aluminum_Cast",
//"Aluminum_Corrugated",
//"Aluminum_Matte",
//"BarnFindOrange_Solid",
//"BasketCaseBlue_Solid",
//"BeachBumAqua_Metallic",
//"BlueBayou_Solid",
//"BoulevardBlack_Solid",
//"Brass_Brushed",
//"Brass_Cartridge",
//"Brass_Matte",
//"Brass_Oxidized",
//"Brass_Patinated",
//"Brass_Polished",
//"Brass_Satin",
//"Brass_Standard",
//"Bronze_Brushed",
//"Bronze_Corrosion",
//"Bronze_Matte",
//"Bronze_Oxidized",
//"Bronze_Polished",
//"Bronze_Polished2",
//"Bronze_Rough",
//"Bronze_Satin",
//"BurnOutBlue_Metallic",
//"CandyPantsViolet_Metallic",
//"Carbon_Fiber",
//"Carbon_Fiber_Glossy",
//"Carbon_Fiber_GlossyCoat",
//"Carbon_Fiber_SemiGlossy",
//"Car_Paint_Black",
//"Car_Paint_Bue",
//"Car_Paint_Dark_Grey",
//"Car_Paint_Ice_Silver",
//"Car_Paint_Indy_Yellow",
//"Car_Paint_Inferno",
//"Car_Paint_Jasmine_Green",
//"Car_Paint_Lapis_Blue",
//"Car_Paint_Lava_Red",
//"Car_Paint_Metallic",
//"Car_Paint_North_Grey",
//"Car_Paint_Pearlescent",
//"Car_Paint_Solid",
//"Car_Paint_Tungsten",
//"Car_Paint_Venetian_Red",
//"Car_Paint_Vibrant_Violet",
//"Car_Paint_Wilderness_Green",
//"Cast_Iron",
//"Champagne_Metallic",
//"CherryGumball_Solid",
//"ChopTopSilver_Metallic",
//"Chrome",
//"Chrome_Dusty",
//"Chrome_Matte",
//"Chrome_Sandblasted",
//"Chrome_Scratched",
//"Concrete_BrickCracks_Grey",
//"Concrete_PaintedCracks",
//"Concrete_PaintedRough",
//"Concrete_Stone",
//"Concrete_Tiles",
//"Concrete_WornBare",
//"Concrete_WornBare_SmoothBump",
//"Copper Brushed",
//"Copper_Brushed",
//"Copper_Dented",
//"Copper_Old",
//"Copper_Polished",
//"Copper_Satin",
//"Copper_Wrought",
//"CruiseNighttBlue_Metallic",
//"DesertedTan_Flat",
//"EastwoodBluePearl_Pearlescent",
//"EastwoodRoyalBlue_Metallic",
//"ElectricYellow_Solid",
//"Emissive_CoolLight",
//"Emissive_Fluorescent_Cyan",
//"Emissive_Fluorescent_Magenta",
//"Emissive_Fluorescent_White",
//"Emissive_Fluorescent_Yellow",
//"EuroRacingGreen_Metallic",
//"EyeCandyGreen_Solid",
//"Fabric_Matte_Solid_Beige",
//"Fabric_Matte_Solid_Red",
//"Fabric_Matte_Transparent_Beige",
//"Fabric_Matte_Transparent_Red",
//"Fabric_Silk",
//"FiberGlass",
//"Fur_Carpet_Displacement",
//"Galvanized-Steel",
//"GasserGreen_Pearlescent",
//"Generic",
//"Glass_Antique",
//"Glass_CarBreakLight",
//"Glass_CarHeadLight",
//"Glass_CarIndicatorLight",
//"Glass_Clear_Window",
//"Glass_Solid_Blue",
//"Glass_Solid_Brown",
//"Glass_Solid_Clear",
//"Glass_Solid_Clear_Scratched",
//"Glass_Solid_Frosted",
//"Glass_Solid_Green",
//"Glass_Solid_GreenBlue",
//"Glass_Solid_GreenBlue_Scratched",
//"Glass_Solid_Tinted",
//"Glass_Solid_Yellow",
//"Glass_Thin_Bronze",
//"Glass_Thin_Green",
//"Glass_Tinted_Dark",
//"Glass_Used",
//"Gold",
//"Gold_Brushed",
//"Gold_Foil_Rough",
//"Gold_Paint",
//"Gold_Paint_Cracked",
//"Gold_Polished",
//"Gold_Rough",
//"Gold_Satin",
//"Ground_Dark",
//"Ground_Dark_Displacement",
//"Ground_Grass",
//"Ground_Grass_Cut_Displacement",
//"Ground_Grass_Displacement",
//"Gun_Metal",
//"HugginOrange_Solid",
//"Iron_Hammered",
//"Iron_Oxidized",
//"Iron_Rugged",
//"Iron_Smooth",
//"Iron_Worn",
//"Jewels_Diamond",
//"Jewels_Emerald",
//"Jewels_Ruby",
//"Lead_Matte",
//"Lead_Rough",
//"Lead_Rusted",
//"Lead_Sandblasted",
//"Lead_Smooth",
//"Leather_Beige",
//"Leather_Black",
//"Leather_Brown",
//"LimeSqueezinGreen_Solid",
//"Liquids_Alcohol_Champagne",
//"MalibuSunsetOrange_Pearlescent",
//"manifest.json",
//"Mercury",
//"Metallic_Paint_Matte_Red",
//"Metallic_Paint_Red",
//"Metallic_Paint_Silver",
//"Metal_Plate",
//"Mirror",
//"OrangeUBad_Solid",
//"Paint_EggShell_LaserLemon",
//"Paint_EggShell_SleekWhite",
//"Paint_EggShell_SunValley",
//"Paint_EggShell_Tanzanite",
//"Paint_EggShell_TartOrange",
//"Paint_EggShell_TropicalSea",
//"Paint_Flat_LaserLemon",
//"Paint_Flat_SleekWhite",
//"Paint_Flat_SunValley",
//"Paint_Flat_Tanzanite",
//"Paint_Flat_TartOrange",
//"Paint_Flat_TawnyDayLily",
//"Paint_Flat_TropicalSea",
//"Paint_Flat_VoilePink",
//"Paint_Glossy_LaserLemon",
//"Paint_Glossy_SleekWhite",
//"Paint_Glossy_SunValley",
//"Paint_Glossy_Tanzanite",
//"Paint_Glossy_TartOrange",
//"Paint_Glossy_TropicalSea",
//"PinupRed_Solid",
//"Plastic_Glossy_Black",
//"Plastic_Glossy_Red",
//"Plastic_Matte_Black",
//"Plastic_Matte_Red",
//"Plastic_Matte_White",
//"Plastic_Transparent_Solid_ClearBlue",
//"Plastic_Transparent_Thin_ClearBlue",
//"PlumCrazy_Metallic",
//"Porcelain_Black",
//"Porcelain_Blue",
//"Porcelain_Cracked_white",
//"Porcelain_Matte_White",
//"Porcelain_New_White",
//"Porcelain_Old_White",
//"Porcelain_White",
//"ProStreetRed_Solid",
//"PureWhite_Solid",
//"QuarterMileCandyRed_Solid",
//"RadeonProRMaps",
//"RatRodBlack_Solid",
//"ReptileRed_Solid",
//"RodzBerry_Metallic",
//"Roofing_ClayShingles_Beige",
//"Roofing_CorrugatedIron",
//"Roofing_RedClayTiles",
//"RottenLimeGreen_Solid",
//"Rubber_Bumpy",
//"Rubber_Diamonds",
//"Rubber_Ribbed",
//"Rubber_SmoothMatte",
//"Rubber_SmoothMatte_Black",
//"Rubber_SmoothMatte_Blue",
//"Rubber_SmoothMatte_Green",
//"Rubber_SmoothMatte_Red",
//"Rubber_SmoothShiny",
//"Rubber_SmoothShiny_Black",
//"Rubber_SmoothShiny_Blue",
//"Rubber_SmoothShiny_Green",
//"Rubber_SmoothShiny_Red",
//"Rubber_Smooth_Clear",
//"Rubber_Used",
//"Rust_Metal",
//"SaltWaterTaffyTeal_Metallic",
//"Scratched_Metallic_Paint_Red",
//"Scratched_Metallic_Paint_Yellow",
//"Silver_Brushed",
//"Silver_Polished",
//"Silver_Satin",
//"Stainless_Steel",
//"Steel_Blue",
//"Steel_Galvanized",
//"Steel_Oxidized",
//"Steel_Smooth",
//"Steel_Worn",
//"StraightAxleRedPearl_Pearlescent",
//"Styrofoam",
//"SugarCoatItGold_Metallic",
//"TequilaLimeNGold_Solid",
//"TunnelRamGray_Metallic",
//"USABrightWhiteFlat_Solid",
//"USABrightWhite_Solid",
//"VinoRojo_Solid",
//"Water_Transparent",
//"Water_Transparent_Bump",
//"Water_Transparent_Displacement",
//"Wood_Bark",
//"Wood_Beech_Glossy",
//"Wood_Beech_Unfinished",
//"Wood_Cedar_Glossy",
//"Wood_Cedar_Unfinished",
//"Wood_Clear_Rustic",
//"Wood_Mahogany_Glossy",
//"Wood_Mahogany_Unfinished",
//"Wood_Maple_Glossy",
//"Wood_Maple_Unfinished",
//"Wood_Natural_Maple",
//"Wood_Oak_Glossy",
//"Wood_Oak_Unfinished",
//"Wood_Planks_Oak_Glossy",
//"Wood_Planks_Oak_Unfinished",
//"Wood_Rustic",
//"Wood_Rustic_Cherry",
//"Wood_Wenge_Glossy",
//"Wood_Wenge_Unfinished"
};

//gets material library path:
proc string getMatLibraryPath(){
	python( "import sys" );
	python("import fireRender.rpr_material_browser");
	python("reload(fireRender.rpr_material_browser)");
	string $libraryP = python("fireRender.rpr_material_browser.getLibPath()");

	if (size($libraryP)==0){
		//if material library is not installed:
		return "";
	}

	return $libraryP;
}

//////////////////////////
//Test Functions (Scenes):
//////////////////////////
proc mayaSceneTests(string $resultsDirectory, string $projectBase, string $resultFolder_color, string $resultFolder_opacity, string $useGPU[], string $sceneRenderData[]){
	string $renderViewName = getRenderWindowPanel();
    int $j = 0;
	int $i = 0;

    // Run render tests
	float $startTime = 0;
	float $testTime = 0;
    for ($j = 0 ; $j<size($sceneRenderData) ; $j += 4) {
		//clock start time:
		$startTime = `timerX`;

		string $projectFolderPath = $projectBase + $sceneRenderData[$j];
		string $sceneF = $sceneRenderData[$j+1];
		string $additionalFileNameId = $sceneRenderData[$j+3];
		string $sceneFile = substituteAllString($sceneF,".mb","") + $additionalFileNameId + ".jpg";
		string $additionalFuncCall = $sceneRenderData[$j+2];
		

		string $resultFileName_color = $resultFolder_color + $sceneFile;
		string $resultFileName_opacity = $resultFolder_opacity + $sceneFile;

		setProject($projectFolderPath);

		//open scene:
		openSceneFileAndSetRPRRender($sceneF,$useGPU);

		if (size($additionalFuncCall) > 0){
			eval $additionalFuncCall;
		}

		//we could use this for rendering animations.
		//however that would be not the same as batch rendering.
		currentTime -edit 0;

		//set RPR render to wait for render to finish:
		fireRender -waitForItTwo;

		// render current frame
		renderIntoNewWindow render;

		if (`filetest -f $resultFileName_color` == 0){
			//delete previous image if exists:
			sysFile -delete ($resultFileName_color);
		}
		if (`filetest -f $resultFileName_opacity` == 0){
			//delete previous image if exists:
			sysFile -delete ($resultFileName_opacity);
		}
		
		renderWindowEditor -edit  -dst "color" $renderViewName;
		renderWindowEditor -edit -com -writeImage $resultFileName_color $renderViewName;
		renderWindowEditor -edit  -dst "mask" $renderViewName;
		renderWindowEditor -edit -com -writeImage $resultFileName_opacity $renderViewName;

		//swap back to color so it can be viewed while rendering:
		renderWindowEditor -edit  -dst "color" $renderViewName;
		//calculate total test time:
		$testTime = `timerX -startTime $startTime`;

		global string $reportName;

		writeToJSONReport($resultsDirectory, $reportName, "\n {");
		writeFullJsonReport($resultsDirectory, $sceneF, $sceneFile, $testTime, $useGPU);
		if ($j+4 < size($sceneRenderData)){
			writeToJSONReport($resultsDirectory, $reportName, "\n },");
		}
		else{ 
			writeToJSONReport($resultsDirectory, $reportName, "\n }");
		}
		
		file -f -new;
	}
}

/////////////////////////////
//Test Functions (Materials):
/////////////////////////////
proc mayaMaterialTests(string $resultsDirectory, string $projectFolderPath, string $sceneFile, string $resultFolder, string $useGPU[], string $libraryPath, string $contentList[]){
	setProject($projectFolderPath);
	
	string $renderViewNameMatTesting = getRenderWindowPanel();

	int $i = 0;
	int $j = 0;
	string $folderPath = "";
	string $xmlPath = "";
	string $subContentList[] = {};
	string $materialTestNode = "materialTestNode";
	string $materialTestNodeSG = "materialTestNodeSG";
	string $resultFileName = "";
	string $resultFilePath = "";
	float $startTime = 0;
	float $testTime = 0;

	for (;$i < size($contentList); $i++){
		$folderPath = ($libraryPath + "/" + $contentList[$i]);
		if (`filetest -d $folderPath`){
			//directory:
			$subContentList = `getFileList -folder $folderPath -filespec "*.xml"`;
			if (size($subContentList) == 0){
				$subContentList = `getFileList -folder $folderPath -filespec "*.XML"`;
			}
			$j = 0;
			for (;$j < size($subContentList);$j++){
				//clock start time:
				$startTime = `timerX`;

				$resultFileName = $contentList[$i] + ".jpg";
				$resultFilePath = $resultFolder + $resultFileName;

				//open material test scene again to flush out changes:
				openSceneFileAndSetRPRRender($sceneFile,$useGPU);

				$xmlPath = $folderPath + "/" + $subContentList[$j];
				RPRXMLImport -file $xmlPath -importImages false -mn $materialTestNode;
				// probe03 object on scene
				select -r Probe03;
				sets -e -forceElement $materialTestNodeSG;

				fireRender -waitForItTwo;

				renderIntoNewWindow render;

				if (`filetest -f $resultFilePath` == 0){
					//delete previous image if exists:
					sysFile -delete ($resultFilePath);
				}

				renderWindowEditor -edit  -dst "color" $renderViewNameMatTesting;
				renderWindowEditor -edit -com -writeImage $resultFilePath $renderViewNameMatTesting;

				$testTime = `timerX -startTime $startTime`;

				global string $reportName;

				writeToJSONReport($resultsDirectory, $reportName, "\n {");
				writeFullJsonReport($resultsDirectory, $sceneFile, $resultFileName, $testTime, $useGPU);
				if ($i+1 < size($contentList)){
					writeToJSONReport($resultsDirectory, $reportName, "},");
				}
				else{
					writeToJSONReport($resultsDirectory, $reportName, "}");
				}

				file -f -new;
			}
		}
	}
}

//main function
global proc mayaBenchmark(int $wantedTests[]){

	global string $reportName;
	if (`filetest -f $reportName` == 0){
		//delete previous report if exists:
		sysFile -delete ($reportName);
	}

	//check plugin loaded
	if( `pluginInfo -query -loaded RadeonProRender` == 0){
    	loadPlugin RadeonProRender;
	}
    // updateRendererUI;
    // updateRenderOverride;

    // unifiedRenderGlobalsWindow;
    // updateRendererUI;
    // updateRenderOverride;

	// Force the window size to SPEC APC definition 1920x1024 30 pixels are not used to make way for window boarders
	// window -e -tlc 0 0 -wh 1920 1050 MayaWindow;

	string $scriptPath = `whatIs mayaBenchmark`;
	string $scriptPathTokens[];
	// tokenize $scriptPath " " $scriptPathTokens;
	tokenize $scriptPath "\n" $scriptPathTokens;

	string $pathArray[] = stringToStringArray($scriptPathTokens[4], "/");
	string $resultsDirectory = "";
	string $projectBase = "";
	
	$projectBase = "D:/jobs_launcher/tests/assets/Maya" + "/";

	int $a = 0;
	for ($a = 0; $a < size($pathArray)-1; $a++){ 		//-1 to delete *.mel name
		$resultsDirectory = $resultsDirectory + $pathArray[$a] + "/";
		print($resultsDirectory + "_\n");
	}
	
	global string $sceneRenderData[];
	global string $testType;
	string $resultColor = $resultsDirectory + "Color/";
	string $resultOpacity = $resultsDirectory + "Opacity/";

	if (`filetest -d $resultColor` == 0){
		sysFile -makeDir $resultColor;
	}
	if (`filetest -d $resultOpacity` == 0){
		sysFile -makeDir $resultOpacity;
	}

	string $temp = intArrayToString($wantedTests, " ");
	string $useGPU[] = stringToStringArray($temp, " ");

	print("resultsDirectory\n");
	print($resultsDirectory + "\n");

	if (`match "Materials" $testType` == "Materials"){
		string $matProjectFolderPath = $projectBase + "MaterialLibraryScene/";
		string $matSceneName = "MaterialTestScene.mb";
		string $libPath = getMatLibraryPath();

		//all materials in library - list of folders	
		string $contentList[];
		global string $sceneRenderData[];
		if (`strcmp $sceneRenderData[0] "*"`){
			$contentList = $sceneRenderData;
		}
		else{
			$contentList = `getFileList -folder $libPath`;
		}

		createExpectedLogMaterials("expected.json", $resultsDirectory, $contentList, $useGPU);

		writeToJSONReport($resultsDirectory, $reportName, "[");
		mayaMaterialTests($resultsDirectory, $matProjectFolderPath, $matSceneName, $resultColor, $useGPU, $libPath, $contentList);
		writeToJSONReport($resultsDirectory, $reportName, "\n]");	
	}else{
		createExpectedLog("expected.json", $resultsDirectory, $sceneRenderData, $useGPU);

		writeToJSONReport($resultsDirectory, $reportName, "[");
		mayaSceneTests($resultsDirectory, $projectBase, $resultColor, $resultOpacity, $useGPU, $sceneRenderData);
		writeToJSONReport($resultsDirectory, $reportName, "\n]");	
	}

	file -f -new;

	// close file with script editor trace
	string $traceFile = getenv( "MAYA_CMD_FILE_OUTPUT" );
	int $descriptor = `cmdFileOutput -o $traceFile -q`;
	if ( -1 != $descriptor ) {
	    cmdFileOutput -close $descriptor;
	}

	evalDeferred("quit -abort");
}